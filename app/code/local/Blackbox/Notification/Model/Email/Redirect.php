<?php

/**
 * @method string getType()
 * @method $this setType(string $value)
 * @method array getParams()
 * @method $this setParams(array $value)
 *
 * @method Blackbox_Notification_Model_Resource_Email_Redirect getResource()
 *
 * Class Blackbox_Notification_Model_Email_Redirect
 */
class Blackbox_Notification_Model_Email_Redirect extends Mage_Core_Model_Abstract
{
    const TYPE_ORDER_SUMMARY = 'order_summary';

    protected $_typesConfig = array(
        self::TYPE_ORDER_SUMMARY => 'blackbox_notification/email_redirect_type_order'
    );

    protected $_config = false;

    protected function _construct()
    {
        $this->_init('blackbox_notification/email_redirect');
    }

    public function generateRedirectUrl($customer)
    {
        return $this->getTypeInstance()->generateUrl($this, $customer);
    }

    public function setConfig($config)
    {
        $this->_config = $config;
        $this->setDataChanges(true);
    }

    public function addConfigValue($groupId, $url)
    {
        $this->_config[$groupId] = $url;
        $this->setDataChanges(true);
    }

    public function getConfig()
    {
        if ($this->_config === false) {
            $this->_config = $this->getResource()->getConfig($this);
        }
        return $this->_config;
    }

    public function importConfig(Blackbox_Notification_Model_Rule $rule)
    {
        $config = array();
        foreach ($rule->getRedirectConfig() as $row) {
            if ($row['group_id'] == 'default') {
                $config[''] = $row['url'];
            } else {
                $config[$row['group_id']] = $row['url'];
            }
        }
        return $this->setConfig($config);
    }

    /**
     * @return Blackbox_Notification_Model_Email_Redirect_Type_Abstract
     */
    protected function getTypeInstance()
    {
        return Mage::getModel($this->_typesConfig[$this->getType()]);
    }

    protected function _beforeSave()
    {
        if (!empty($this->getParams())) {
            $this->setParams(json_encode($this->getParams()));
        }
        return parent::_beforeSave(); // TODO: Change the autogenerated stub
    }

    protected function _afterSave()
    {
        if (!empty($this->getParams())) {
            $this->setParams(json_decode($this->getParams(), true));
        }
        return parent::_afterSave();
    }

    protected function _afterLoad()
    {
        if (!empty($this->getParams())) {
            $this->setParams(json_decode($this->getParams(), true));
        }
        return parent::_afterLoad();
    }
}